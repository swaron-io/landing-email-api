"""create_articles_models

Revision ID: 16825bd36fcd
Revises: 
Create Date: 2023-05-08 13:34:12.566922

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.sql import func

# revision identifiers, used by Alembic.
revision = "16825bd36fcd"
down_revision = None
branch_labels = None
depends_on = None


def table_exists(table_name):
    inspector = sa.inspect(op.get_bind())
    return table_name in inspector.get_table_names()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists("users"):
        op.create_table(
            "users",
            sa.Column("id", mysql.INTEGER(), autoincrement=True, nullable=False),
            sa.Column("name_user", mysql.VARCHAR(length=30), nullable=False),
            sa.PrimaryKeyConstraint("id"),
            mysql_collate="utf8mb4_0900_ai_ci",
            mysql_default_charset="utf8mb4",
            mysql_engine="InnoDB",
        )
        op.create_index("name_user", "users", ["name_user"], unique=False)

    if not table_exists("subscribers"):
        op.create_table(
            "subscribers",
            sa.Column("id", mysql.INTEGER(), autoincrement=True, nullable=False),
            sa.Column("email", mysql.VARCHAR(length=255), nullable=False),
            sa.Column(
                "created_at", sa.DateTime(), nullable=False, server_default=func.now()
            ),
            sa.PrimaryKeyConstraint("id"),
            mysql_collate="utf8mb4_0900_ai_ci",
            mysql_default_charset="utf8mb4",
            mysql_engine="InnoDB",
        )
        op.create_index("email", "subscribers", ["email"], unique=False)

    if not table_exists("tags"):
        op.create_table(
            "tags",
            sa.Column("id", mysql.INTEGER(), autoincrement=True, nullable=False),
            sa.Column("tag", mysql.VARCHAR(length=30), nullable=False),
            sa.Column(
                "created_at", sa.DateTime(), nullable=False, server_default=func.now()
            ),
            sa.PrimaryKeyConstraint("id"),
            mysql_collate="utf8mb4_0900_ai_ci",
            mysql_default_charset="utf8mb4",
            mysql_engine="InnoDB",
        )
        op.create_index("tag", "tags", ["tag"], unique=False)

    if not table_exists("articles"):
        op.create_table(
            "articles",
            sa.Column("id", mysql.INTEGER(), autoincrement=True, nullable=False),
            sa.Column("article_url", mysql.VARCHAR(length=255), nullable=False),
            sa.Column(
                "recommended_by", mysql.INTEGER(), autoincrement=False, nullable=False
            ),
            sa.Column(
                "created_at", sa.DateTime(), nullable=False, server_default=func.now()
            ),
            sa.ForeignKey("recommended_by", "users.id", name="articles_user"),
            sa.PrimaryKeyConstraint("id"),
            mysql_collate="utf8mb4_0900_ai_ci",
            mysql_default_charset="utf8mb4",
            mysql_engine="InnoDB",
        )
        op.create_index("article_url", "articles", ["article_url"], unique=False)

    if not table_exists("articles_tags"):
        op.create_table(
            "articles_tags",
            sa.Column("id", mysql.INTEGER(), autoincrement=True, nullable=False),
            sa.Column(
                "id_article", mysql.INTEGER(), autoincrement=False, nullable=False
            ),
            sa.Column("id_tag", mysql.INTEGER(), autoincrement=False, nullable=False),
            sa.ForeignKey("id_article", "articles.id", name="articles_tags_id"),
            sa.ForeignKey("id_tag", "tags.id", name="articles_tags_tag"),
            sa.PrimaryKeyConstraint("id"),
            mysql_collate="utf8mb4_0900_ai_ci",
            mysql_default_charset="utf8mb4",
            mysql_engine="InnoDB",
        )


def downgrade() -> None:
    # op.drop_index('article_url', table_name='articles')
    # op.drop_table('articles')
    # op.drop_table('articles_tags')
    # op.drop_index('tag', table_name='tags')
    # op.drop_table('tags')
    # op.drop_index('email', table_name='subscribers')
    # op.drop_table('subscribers')
    # op.drop_index('name', table_name='users')
    # op.drop_table('users')
    pass
